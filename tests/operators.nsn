main =
    let _ = assert(10:u8 == 10, "'==' should work with u8")
    let _ = assert(20:u8 >  10, "'>'  should work with u8")
    let _ = assert(20:u8 >= 10, "'>=' should work with u8")
    let _ = assert(10:u8 >= 10, "'>=' should work with u8")
    let _ = assert(10:u8 <  20, "'<'  should work with u8")
    let _ = assert(10:u8 <= 20, "'<=' should work with u8")
    let _ = assert(10:u8 <= 10, "'<=' should work with u8")

    let _ = assert(10:u8 + 10 == 20,  "'+' should work with u8")
    let _ = assert(10:u8 - 10 == 0,   "'-' should work with u8")
    let _ = assert(10:u8 * 10 == 100, "'*' should work with u8")
    let _ = assert(10:u8 / 10 == 1,   "'/' should work with u8")

    let _ = assert(10:u16 == 10, "'==' should work with u16")
    let _ = assert(20:u16 >  10, "'>'  should work with u16")
    let _ = assert(20:u16 >= 10, "'>=' should work with u16")
    let _ = assert(10:u16 >= 10, "'>=' should work with u16")
    let _ = assert(10:u16 <  20, "'<'  should work with u16")
    let _ = assert(10:u16 <= 20, "'<=' should work with u16")
    let _ = assert(10:u16 <= 10, "'<=' should work with u16")

    let _ = assert(10:u16 + 10 == 20,  "'+' should work with u6")
    let _ = assert(10:u16 - 10 == 0,   "'-' should work with u6")
    let _ = assert(10:u16 * 10 == 100, "'*' should work with u6")
    let _ = assert(10:u16 / 10 == 1,   "'/' should work with u6")

    let _ = assert(10:u32 == 10, "'==' should work with u32")
    let _ = assert(20:u32 >  10, "'>'  should work with u32")
    let _ = assert(20:u32 >= 10, "'>=' should work with u32")
    let _ = assert(10:u32 >= 10, "'>=' should work with u32")
    let _ = assert(10:u32 <  20, "'<'  should work with u32")
    let _ = assert(10:u32 <= 20, "'<=' should work with u32")
    let _ = assert(10:u32 <= 10, "'<=' should work with u32")

    let _ = assert(10:u32 + 10 == 20,  "'+' should work with u32")
    let _ = assert(10:u32 - 10 == 0,   "'-' should work with u32")
    let _ = assert(10:u32 * 10 == 100, "'*' should work with u32")
    let _ = assert(10:u32 / 10 == 1,   "'/' should work with u32")

    let _ = assert(10:u64 == 10, "'==' should work with u64")
    let _ = assert(20:u64 >  10, "'>'  should work with u64")
    let _ = assert(20:u64 >= 10, "'>=' should work with u64")
    let _ = assert(10:u64 >= 10, "'>=' should work with u64")
    let _ = assert(10:u64 <  20, "'<'  should work with u64")
    let _ = assert(10:u64 <= 20, "'<=' should work with u64")
    let _ = assert(10:u64 <= 10, "'<=' should work with u64")

    let _ = assert(10:u64 + 10 == 20,  "'+' should work with u64")
    let _ = assert(10:u64 - 10 == 0,   "'-' should work with u64")
    let _ = assert(10:u64 * 10 == 100, "'*' should work with u64")
    let _ = assert(10:u64 / 10 == 1,   "'/' should work with u64")

    let _ = assert(10:usize == 10, "'==' should work with usize")
    let _ = assert(20:usize >  10, "'>'  should work with usize")
    let _ = assert(20:usize >= 10, "'>=' should work with usize")
    let _ = assert(10:usize >= 10, "'>=' should work with usize")
    let _ = assert(10:usize <  20, "'<'  should work with usize")
    let _ = assert(10:usize <= 20, "'<=' should work with usize")
    let _ = assert(10:usize <= 10, "'<=' should work with usize")

    let _ = assert(10:usize + 10 == 20,  "'+' should work with uzise")
    let _ = assert(10:usize - 10 == 0,   "'-' should work with uzise")
    let _ = assert(10:usize * 10 == 100, "'*' should work with uzise")
    let _ = assert(10:usize / 10 == 1,   "'/' should work with uzise")

    let _ = assert(10:i8 == 10, "'==' should work with i8")
    let _ = assert(20:i8 >  10, "'>'  should work with i8")
    let _ = assert(20:i8 >= 10, "'>=' should work with i8")
    let _ = assert(10:i8 >= 10, "'>=' should work with i8")
    let _ = assert(10:i8 <  20, "'<'  should work with i8")
    let _ = assert(10:i8 <= 20, "'<=' should work with i8")
    let _ = assert(10:i8 <= 10, "'<=' should work with i8")

    let _ = assert(10:i8 + 10 == 20,  "'+' should work with i8")
    let _ = assert(10:i8 - 10 == 0,   "'-' should work with i8")
    let _ = assert(10:i8 * 10 == 100, "'*' should work with i8")
    let _ = assert(10:i8 / 10 == 1,   "'/' should work with i8")

    let _ = assert(10:i16 == 10, "'==' should work with i16")
    let _ = assert(20:i16 >  10, "'>'  should work with i16")
    let _ = assert(20:i16 >= 10, "'>=' should work with i16")
    let _ = assert(10:i16 >= 10, "'>=' should work with i16")
    let _ = assert(10:i16 <  20, "'<'  should work with i16")
    let _ = assert(10:i16 <= 20, "'<=' should work with i16")
    let _ = assert(10:i16 <= 10, "'<=' should work with i16")

    let _ = assert(10:i16 + 10 == 20,  "'+' should work with i16")
    let _ = assert(10:i16 - 10 == 0,   "'-' should work with i16")
    let _ = assert(10:i16 * 10 == 100, "'*' should work with i16")
    let _ = assert(10:i16 / 10 == 1,   "'/' should work with i16")

    let _ = assert(10:i32 == 10, "'==' should work with i32")
    let _ = assert(20:i32 >  10, "'>'  should work with i32")
    let _ = assert(20:i32 >= 10, "'>=' should work with i32")
    let _ = assert(10:i32 >= 10, "'>=' should work with i32")
    let _ = assert(10:i32 <  20, "'<'  should work with i32")
    let _ = assert(10:i32 <= 20, "'<=' should work with i32")
    let _ = assert(10:i32 <= 10, "'<=' should work with i32")

    let _ = assert(10:i32 + 10 == 20,  "'+' should work with i32")
    let _ = assert(10:i32 - 10 == 0,   "'-' should work with i32")
    let _ = assert(10:i32 * 10 == 100, "'*' should work with i32")
    let _ = assert(10:i32 / 10 == 1,   "'/' should work with i32")

    let _ = assert(10:i64 == 10, "'==' should work with i64")
    let _ = assert(20:i64 >  10, "'>'  should work with i64")
    let _ = assert(20:i64 >= 10, "'>=' should work with i64")
    let _ = assert(10:i64 >= 10, "'>=' should work with i64")
    let _ = assert(10:i64 <  20, "'<'  should work with i64")
    let _ = assert(10:i64 <= 20, "'<=' should work with i64")
    let _ = assert(10:i64 <= 10, "'<=' should work with i64")

    let _ = assert(10:i64 + 10 == 20,  "'+' should work with i64")
    let _ = assert(10:i64 - 10 == 0,   "'-' should work with i64")
    let _ = assert(10:i64 * 10 == 100, "'*' should work with i64")
    let _ = assert(10:i64 / 10 == 1,   "'/' should work with i64")

    let _ = assert(10:f32 == 10, "'==' should work with f32")
    let _ = assert(20:f32 >  10, "'>'  should work with f32")
    let _ = assert(20:f32 >= 10, "'>=' should work with f32")
    let _ = assert(10:f32 >= 10, "'>=' should work with f32")
    let _ = assert(10:f32 <  20, "'<'  should work with f32")
    let _ = assert(10:f32 <= 20, "'<=' should work with f32")
    let _ = assert(10:f32 <= 10, "'<=' should work with f32")

    let _ = assert(10:f32 + 10 == 20,  "'+' should work with f32")
    let _ = assert(10:f32 - 10 == 0,   "'-' should work with f32")
    let _ = assert(10:f32 * 10 == 100, "'*' should work with f32")
    let _ = assert(10:f32 / 10 == 1,   "'/' should work with f32")

    let _ = assert(10:f64 == 10, "'==' should work with f64")
    let _ = assert(20:f64 >  10, "'>'  should work with f64")
    let _ = assert(20:f64 >= 10, "'>=' should work with f64")
    let _ = assert(10:f64 >= 10, "'>=' should work with f64")
    let _ = assert(10:f64 <  20, "'<'  should work with f64")
    let _ = assert(10:f64 <= 20, "'<=' should work with f64")
    let _ = assert(10:f64 <= 10, "'<=' should work with f64")

    let _ = assert(10:f64 + 10 == 20,  "'+' should work with f64")
    let _ = assert(10:f64 - 10 == 0,   "'-' should work with f64")
    let _ = assert(10:f64 * 10 == 100, "'*' should work with f64")
    let _ = assert(10:f64 / 10 == 1,   "'/' should work with f64")

    let _ = assert(not false, "'not' should work")

    let _ = assert(true, "assert should do nothing on 'true'")
    assert(false, "sanity check, this will fail")
